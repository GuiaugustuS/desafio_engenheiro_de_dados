# -*- coding: utf-8 -*-
"""Api_youtube.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L6HxUBg3vTBwU_OEgU9VnE-OM0GfKNK5

# Importando os módulos que serão utilizados.
"""

from IPython.display import YouTubeVideo

# Módulo cliente da API do google que permite fazer a consulta.
from googleapiclient.discovery import build

from datetime import datetime

"""# Armazenando a chave da API na variável 'api_key'"""

api_key = 'AIzaSyDd2Brt7y1WAoZ_f824xjEW4LPtpvNZko8'

"""# Dando permição para realizar as consultas no youtube."""

youtube = build('youtube', 'v3', developerKey=api_key)

"""# Extraindo vídeos de uma Playlist.
Precisamos informar o identificador da playlist, que está na url da playlist no youtube. 
"""

playlistId = 'PL5TJqBvpXQv6SSsEgQrNwpOLTupXPuiMQ'
playlistName = 'Dicas de Pandas'
nextPage_token = None

"""# PARÂMETRO E PROPRIEDADES
O parâmetro 'playlistItems', lista os parâmetros que esta consulta suporta.

A propriedade 'snippet' contém vários campos, incluindo as propriedades title, description, position e resourceId. Sê definirmos part=snippet, a resposta da API conterá todas essas propriedades.

O parâmetro 'playlistId' contém o ID da playlist.

O parâmetro maxResults especifica o número máximo de itens que deve ser retornado no conjunto de resultados os valores aceitáveis são 0 a 50, inclusive. O valor padrão é 5

O parâmetro pageToken identifica uma página específica no conjunto de resultados que será retornado. Em uma resposta da API, as propriedades nextPageToken e prevPageToken identificam outras páginas que podem ser recuperadas.

# Criando a lista 'playlist_videos' que receberá os parâmetros e propriedades citados acima.
"""

playlist_videos = []

while True:
    res = youtube.playlistItems().list(part='snippet', playlistId=playlistId, maxResults=50, pageToken=nextPage_token).execute()
    playlist_videos += res['items']

    # A cada iteração, a variável 'nestPageToken' é atualizada com as informações da playlist.
    nextPage_token = res.get('nestPageToken')

    # O break irá parar a iteração se o token retornado pela consulta for vazio para não termos um loop infinito.
    if nextPage_token is None:
        break

"""# A consulta nos retorna um Json contendo todas as informações dos vídeos que estão na playlist informada."""

playlist_videos

"""# Consultando a quantidade de vídeos contidos na playlist informada."""

print("Número total de vídeos na Playlist ", len(playlist_videos))

"""# Extraindo os id's dos vídeos da playlist."""

videos_ids = list(map(lambda x: x['snippet']['resourceId']['videoId'], playlist_videos))

videos_ids

"""# Criando uma lista das estatístiscas de cada vídeo tais como, quantidade de visualizações, likes, favoritos e comentários."""

stats = []

for video_id in videos_ids:
  res = youtube.videos().list(part='statistics', id=video_id).execute()
  stats += res['items']

stats

"""# Importando o pandas"""

import pandas as pd

"""# Criando um datraframe chamado 'stats_df', com as seguintes colunas: 'kind', 'etag', 'id', 'statistics'."""

stats_df = pd.DataFrame(columns=['kind','etag','id','statistics',])

"""# Inserindo as informações da lista 'stats' no datraframe 'stats_df'"""

for i in range(0, len(stats)):
    currentItem = stats[i]
    stats_df.loc[i] = stats[i]['kind'],stats[i]['etag'],stats[i]['id'],stats[i]['statistics']

"""# Obs: A coluna 'statistics' é uma lista que contém as seguintes informações: 'viewCount', 'likeCount', 'favoriteCount', 'commentCount'.

"""

stats_df

"""# Criando um datraframe chamado 'playlist_videos_df', com as seguintes colunas: 'kind', 'etag', 'id', 'snippet'."""

playlist_videos_df = pd.DataFrame(columns=['kind','etag','id','snippet'])

"""# Inserindo as informações da lista 'playlist_videos' no dataframe 'playlist_videos_df'."""

for i in range(0, len(playlist_videos)):
    currentItem = playlist_videos[i]
    playlist_videos_df.loc[i] = playlist_videos[i]['kind'],playlist_videos[i]['etag'],playlist_videos[i]['id'],playlist_videos[i]['snippet']

"""# Obs: A coluna 'snippet' é uma lista que contém as seguintes informações: 'title', 'description', 'channelId', 'publishedAt', entre outras."""

playlist_videos_df

"""# Criando listas que receberão as propriedades dos parâmetros 'statistics' e 'snippet'"""

videos_title = list(map(lambda x: x['snippet']['title'], playlist_videos))
published_date = list(map(lambda x: str(x['snippet']['publishedAt']), playlist_videos))
video_description = list(map(lambda x: x['snippet']['description'], playlist_videos))
videoid = list(map(lambda x: x['snippet']['resourceId']['videoId'], playlist_videos))
liked = list(map(lambda x: int(x['statistics']['likeCount']), stats))
views = list(map(lambda x: int(x['statistics']['viewCount']), stats))
comment = list(map(lambda x: int(x['statistics']['commentCount']), stats))

"""# Extraindo a data e hora do processamento"""

playlist_df = pd.DataFrame({'video_id':videoid,
      'title':videos_title,
      'published_date':published_date,
      'extraction_date':extraction_date,
      'views':views,
      'likes':liked,
      'comment':comment})
playlist_df.head()

"""# Gerando ao dataframe 'playlist_df' com as informações das listas geradas na etapa anterior."""

extraction_date =datetime.now()
extraction_date = extraction_date.date()
#extraction_date = datetime.strftime(extraction_date, '%d/%m/%Y')
str_extraction_date = str(extraction_date)

# Convertendo a data da publicação.
published_date = pd.to_datetime(published_date).date
#published_date = datetime.strftime(published_date, '%d/%m/%Y')

print(f' Data da extração {extraction_date}')

"""# Exportando o dataframe para csv, e renomenado, e colocando a data atual."""

today = extraction_date.strftime('%d-%m-%Y')
name = "Extracao_playlist_videos"
playlist_df.to_csv(f'{name}-{today}.csv', index=False)